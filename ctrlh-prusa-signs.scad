width = 25.4*4;
depth = 25.4*4;
height = 3;

// uncomment one of:
// base();
// printer_sign("Prusa 1", prusa1_qr_data);
// printer_sign("Prusa 2", prusa2_qr_data);


// https://ridercz.github.io/OpenSCAD-QR/
prusa1_url = "http://192.168.15.140";
prusa1_qr_data = [[1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1],
           [1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1],
           [1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
           [1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,0,0,0],
           [1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0],
           [1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1],
           [0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1],
           [0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,1],
           [1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0],
           [1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1],
           [1,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1],
           [1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,0,0],
           [0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1,0,0],
           [1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1],
           [1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,1],
           [1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1],
           [1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1],
           [1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1],
           [1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1]];

prusa2_url = "http://192.168.15.137";
prusa2_qr_data = [[1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [1,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1],
           [1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1],
           [1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
           [1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,0,0,0],
           [1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0],
           [0,1,1,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,1],
           [0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1],
           [1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,1],
           [1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0],
           [1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1],
           [1,0,1,0,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1],
           [1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,0,0],
           [0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,0,0],
           [1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1],
           [1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,0,0,1,1],
           [1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1],
           [1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,1,0,1,1],
           [1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1],
           [1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1]];

module base() {
  difference() {
    cube([width*1.2, 25.4, 25.4]);
    translate([width*.1, 10, 10])
      rotate([70, 0, 0])
        cube([width, depth, height*1.1]);
  }
}


module printer_sign(name, qr_data) {
  cube([width, depth, height]);

  translate([width/4, depth - 18, height])
    linear_extrude(height)
      text(name);
    
  translate([10, width/4, height-1])
    qr_render(qr_data, 2, 3);
}

// QR code rendering method
// from https://ridercz.github.io/OpenSCAD-QR/
module qr_render(data, module_size = 1, height = 1) {
    maxmod = len(data) - 1;
    union() {
        for(r = [0 : maxmod]) {
            for(c = [0 : maxmod]) {
                if(data[r][c] == 1){
                    xo = c * module_size;
                    yo = (maxmod - r) * module_size;
                    translate([xo, yo, 0]) cube([module_size, module_size, height]);
                }
            }
        }
    }
}
